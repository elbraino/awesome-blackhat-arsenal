{
  "Tool Name": "Tracee: Linux Runtime Security and Forensics Using eBPF",
  "Speakers": [
    "Yaniv Agman",
    "Roi Kol"
  ],
  "Tracks": [
    "Track: Reverse Engineering"
  ],
  "Event": "BH-ARSENAL",
  "Github URL": "https://github.com/aquasecurity/tracee",
  "Description": "Tracee is a runtime security and forensics tool for Linux. It is composed of tracee-ebpf, which collects OS events, and tracee-rules, which is the runtime security detection engine.\n\n\nTracee-ebpf is capable of tracing all processes in the system or a group of processes according to some given filters. The set of events to trace can be selected by the user and include the following:\n\n\n1. System calls\n2. LSM hooks (security_file_open, security_bprm_check, cap_capable, ...)\n3. Internal kernel functions (vfs_write, commit_creds, ...)\n4. Special events and alerts (magic_write, mem_prot_alert, ...)\n\n\nOther than tracing, Tracee-ebpf is also capable of capturing files written to disk or memory (e.g. \"fileless\" malwares), and extracting binaries that are dynamically loaded to an application's memory (e.g. when a malware uses a packer). Using these capabilities, it is possible to automatically collect forensic artifacts for later investigation.\nTracee-Rules, is a rule engine that helps you detect suspicious behavioral patterns in streams of events. It is primarily made to leverage events collected with Tracee-eBPF into a Runtime Security solution.\nTracee supports authoring rules in Golang or in Rego.",
  "Year": "2021",
  "Location": "USA"
}