{
  "Tool Name": "WMImplant: An Offensive Use Case of WMI",
  "Speakers": [
    "Chris Truncer"
  ],
  "Tracks": [
    "Track: Network Attacks"
  ],
  "Event": "BH-ARSENAL",
  "Github URL": "https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/RT.md",
  "Description": "When looking forward to the latest defenses that are being seen in environments all over the world today, we're consistently seeing EDR, \"Next-Gen AV\", and application whitelisting. Of the available defenses, application whitelisting seemed like the most interesting challenge to undertake. We wanted to build something that would work against one of the best application whitelisting solutions from a detection/prevention perspective, Windows Defender Application Control (WDAC), previously known as Device Guard.\n\nWDAC aims to lock down Windows workstations via multiple methods, one example is digital signature based rule enforcement when determining if an application is allowed to execute. Another, is that WDAC automatically enforces PowerShell into Constrained Language Mode (CLM), a severely restricted version of PowerShell. So how can you operate in a restricted WDAC environment?\n\nWMImplant is one possible answer. Why not leverage a service that is built in to Windows and enabled by default since the days of Windows Server 2000? Windows Management Instrumentation (WMI) enables us to execute commands on systems, remotely and locally. WIth the enforcement of PowerShell Constrained Langauge Mode (CLM), our PowerShell based code had to adhere to the restrictions of the language mode. WMImplant is fully PowerShell CLM compliant and is designed to provide a Meterpreter-esque menu for users to easily perform post-exploitation tasks against the targeted system.\n\nCome learn how a CLM compliant code-base designed to operate exclusively over WMI can allow you to survive and thrive in a heavily restricted application whitelisting environment.",
  "Year": "2019",
  "Location": "USA"
}