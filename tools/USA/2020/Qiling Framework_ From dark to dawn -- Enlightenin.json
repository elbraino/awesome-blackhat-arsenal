{
  "Tool Name": "Qiling Framework: From dark to dawn -- Enlightening the analysis of the most mysterious IoT Firmware",
  "Speakers": [
    "KaiJern Lau",
    "Bo Wen Sun",
    "Yu Tong",
    "Tian Zhe Ding"
  ],
  "Tracks": [
    "Track: Hardware/Embedded"
  ],
  "Event": "BH-ARSENAL",
  "Github URL": null,
  "Description": "With household appliances and wearable gadgets integrated with network capabilities, we are surrounded by an increasing number of IoT devices. Coming together with the popularity of IoT devices are two critical questions.\n\nIoT devices normally come with a \"call home\" feature, through which users can interact with IoT devices through an App. As a result, users are typically curious about what kind of information they are sending back home.\nAlong with the facilitation from the \"call home\" feature, users are also curious about whether/how IoT devices could potentially allow hackers to gain unauthorized access and thus control the device remotely.\n\nTo answer the questions above, an analysis framework or tool is usually needed. Unfortunately, there has not yet been an effective, efficient analysis framework or tool available for answering such questions. Today, to analyze IoT devices and the corresponding applications, researchers still heavily rely upon qemu-usermode/qemu. However, it has already been demonstrated qemu-usermode/qemu is a very inefficient solution for IoT because it was designed for Linux and development boards.\n\nIn this talk, we will summarize and discuss some common IoT firmwares, which hurdle the analysis of security researchers. Followed by our analysis and discussion, we will then reveal the fundamental problems hidden behind the obstacle. As is specified in our presentation outline, these obstacles include (1) the difficulty of using primitive emulation methods to simulate IoT firmware, (2) the difficulty of using similar specification hardware and general purpose OS to emulate IoT firmware, (3) the difficulty imposed by device drivers and, (4) the concern of insufficient computation and memory resources.\n\nMotivated by our analysis and discussion, we introduce Qiling -- a fully sandboxed, controlled and highly customized framework designed for performing the emulation for IoT devices. In this talk, we will discuss how Qiling Framework empowers security researchers to perform IoT firmware reverse engineering. To be more specifically, we will talk about\n\n- how to emulate various CPU such as ARM, ARM Big Endian, MIPS32, MIPS32 Big Endian, ARM64, X86 and X64;\n- how to emulate various OS such as Linux, MacOS, Windows, FreeBSD;\n- how to simulate all stdio input and output and thus reply expected results;\n- how to build all the network requests through an auto responder in virtualized network\n- how to utilize the instrumentation support to redirect code execution whenever is needed\n- how to fully customize emulated OS, giving researchers the ability to replace syscall or APIs with their own\n- how to enable full CPU control (e.g., updating CPU registers during execution)\n- how to support full gdbserver for platform and multi architecture debugging and thus allow allow researchers to use their preferred debuggers for their debugging tasks\n- how to enable cross-platform and multi-architecture fuzz testing by integrating it with AFL\n\nAlong with this talk, we will share all the firmware that we have tested and will provide a live demo showcasing how easily a researcher can build an isolated testing environment to analyze, instrument, and fuzz a IoT device. In November of 2019, we have already released the source code of our Qiling Framework.",
  "Year": "2020",
  "Location": "USA"
}