{
  "Tool Name": "Unblob: A Firmware Extraction Framework",
  "Speakers": [
    "Quentin Kaiser",
    "Florian Lukavsky"
  ],
  "Tracks": [
    "Reverse Engineering",
    "Internet of Things"
  ],
  "Event": "BH-ARSENAL",
  "Github URL": null,
  "Description": "One of the major challenges of embedded security analysis is the sound and safe extraction of arbitrary firmware.\n\nSpecialized tools that can extract information from those firmwares already exists, but we wanted something smarter that could identify both start offset of a specific chunk (e.g. filesystem, compression stream, archive) and end offset.\n\nWe stick to the format standard as much as possible when deriving these offsets, and we clearly define what we want out of identified chunks (e.g., not extracting meta-data to disk, padding removal).\n\nThis strategy helps us feed known valid data to extractors and precisely identify unidentified chunks, turning unknown unknowns into known unknowns.\n\nGiven the modular design of unblob and the ever expanding repository of supported formats, unblob could be used in areas outside of embedded security such as data recovery, memory forensics, or malware analysis.\n\nunblob has been developed with the following objectives in mind:\n\n* Accuracy - chunk start offsets are identified using battle tested rules, while end offsets are computed according to the format's standard without deviating from it. We minimize false positives as much as possible by validating header structures and discarding overflowing chunks.\n* Security - unblob does not require elevated privileges to run. It's heavily tested and has been fuzz tested against a large corpus of files and firmware images. We rely on up-to-date third party dependencies that are locked to limit potential supply chain issues. We use safe extractors that we audited and fixed where required (e.g., path traversal in ubi_reader, path traversal in jefferson, integer overflow in Yara).\n* Extensibility - unblob exposes an API that can be used to write custom format handlers and extractors in no time.\n* Speed - we want unblob to be blazing fast, that's why we use multi-processing by default, make sure to write efficient code, use memory-mapped files, and use Hyperscan as high-performance matching library. Computation intensive functions are written in Rust and called from Python using specific bindings.",
  "Year": "2023",
  "Location": "Europe"
}