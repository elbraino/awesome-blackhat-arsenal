{
  "Tool Name": "Reversing MCU with Firmware Emulation",
  "Speakers": [
    "KAI JERN LAU",
    "MuChen Su",
    "Zheng Yu",
    "Anh Quynh NGUYEN"
  ],
  "Tracks": [
    "Hardware/Embedded",
    "Reverse Engineering"
  ],
  "Event": "BH-ARSENAL",
  "Github URL": null,
  "Description": "A microcontroller unit (MCU) is a small computer on a single metal-oxide-semiconductor (MOS) integrated circuit (IC) chip. It is widely used in various types of devices, appliances, automobiles, and many more. Recently MCU security has been raised as a major concern among users and operators, as MCU vulnerabilities can be catastrophic. For this reason, it is important to audit MCU code for security issues. Unfortunately, due to the limited resources on MCU, the on-device test for MCU is not feasible. Besides, there are no emulation solutions able to provide a full instrumentation analysis platform for MCU firmware.\n\nOn the other hand, the tight coupling between MCU and hardware peripherals makes it difficult to build an MCU firmware emulator. This greatly hinders the application of dynamic analysis tools in firmware analysis, such as fuzzing.\n\nThis talk discusses how we emulated MCU emulation without real peripheral hardware. This requires to model peripheral's registers and interrupts, and implements their internal logic based on the official peripheral documentation and hardware abstraction layer (HAL). We can now emulate widely used MCU chips from top MCU vendors such as STM, Atmel, NXP, and so on. Each of them includes a diverse set of peripherals, including UART, I2C, SPI, ADC, Ethernet, SD Card, Timer, etc.\n\nUpon our emulation, we built several analysis tools for various firmware formats, such as ELF, Binary, and Intel Hex, which are widely used in MCU libraries (RTOS, Arduino, Protocol Stack, etc). We are able to perform advanced tasks, such as:\n\n- Instrument and hijack MCU's activities (e.g, reads and writes to peripherals).\n- Save and restore current peripheral/execution states (e.g. register and interrupts).\n- Supports multi-threaded firmware, such as RTOS.\n- Hijack the interrupts from peripherals, so users can control the scheduling policy of multi-threaded firmware.\n\nTo demonstrate the power of our work, we will have live demos to show some exciting cases:\n\n- Emulate MCU with external devices via SPI. UART and I2C\n- Fuzz MCU firmware to find 0days with a customized AFL fuzzer.\n- Password brute forcing for MCU firmware\n- To solve some MCU challenges on CTFs\n\nNew code and demo will be released after the talk.",
  "Year": "2022",
  "Location": "Europe"
}