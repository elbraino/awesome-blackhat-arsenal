{
  "Tool Name": "Qiling Framework: Deep Dive Into Obfuscated Binary Analysis",
  "Speakers": [
    "Kai Jern Lau",
    "ChenXu Wu",
    "ZiQiao kong"
  ],
  "Tracks": [
    "Track: Reverse Engineering"
  ],
  "Event": "BH-ARSENAL",
  "Github URL": null,
  "Description": "Modern obfuscation techniques are getting more and more challenged. Existing static techniques are no longer sufficient to analyze binary in heavy obfuscated form. To address this issue, we have to provide security analysts with the ability to perform high-fidelity emulation and sophisticated binary instrumentation framework.\n\nQiling Framework (https://qiling.io) is an advanced sandboxed emulator framework. It encloses a rich set of Python APIs that allow security analysts to develop highly customizable analysis tools with minimal implementation efforts. With the facilitation of the emulation technology in Qiling, our engine can run arbitrary executables in a cross-platform-architecture fashion. As such, security analysts could use it to analyze various executable file-formats, including Windows PE, MachO, ELF, UEFI, MBR, etc.\n\nSince we released Qiling Framework in Nov 2019, our project has received significant attention from the community. Currently, we have about 60+ contributors and almost 1,700 followers on GitHub.\n\nThis session shares the latest update on Qiling Framework, focusing on deobfuscating binaries. We will demonstrate how we can provide instant support for presenting code execution flow in the form of intermediate representations (e.g., IDA Pro or R2). Thanks to some advanced features of Qiling Framework, security analysts can use a series of newly added APIs to ease their efforts in reverse engineering. To conclude, we have few live demos to show how to deal with some real sophisticated binaries.\n\nI. Syscall, Operating System API and Library Hijack\n\nWe will demonstrate how we can use different APIs in Qiling Framework to intercept a binary function and hijack its execution. By intercepting a binary function, we meant intercepting a library function or syscall at the stage of pre-execution, execution, and post-execution, without the restrictions imposed by the OS or underlying computing architecture.\n\n\nII. Save and Restore Current Binary Emulation States\n\nSophisticated binaries impose significant challenges for reverse engineering. With the facilitation of a save-and-restore feature in Qiling Framework, security analysts are able to save and resume an emulation state at any stage. This provides the reverse engineering professionals with the ability to avoid repeatedly running a binary from the beginning state. Given the program state entering into a branch (e.g., taking a jump with jz, jnz, and other branch-taken instructions), Qiling can always save the necessary program state and enable program resume later on.\n\n\nIII. ollvm de-flattern techniques\n\nollvm is a well-known obfuscation tool. One of its obfuscation techniques is Control Flow Flattening. With Qiling emulation, we can search real control flow and restore it easily. Thanks to the newly added feature to present control flow in an intermediate representation (like IDA microcode API, R2 ESIL, VEX, and etc), the new version of Qiling will make such de-flattern techniques cross-architecture.",
  "Year": "2020",
  "Location": "Europe"
}